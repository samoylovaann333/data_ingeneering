import pandas as pd

def validate_raw_data(df: pd.DataFrame) -> bool:
    """
    Validate raw data after extraction
    
    Args:
        df: Raw DataFrame to validate
        
    Returns:
        bool: True if validation passed
    """
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    checks_passed = 0
    total_checks = 4
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: DataFrame –Ω–µ –ø—É—Å—Ç–æ–π
    if not df.empty:
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ")
        checks_passed += 1
    else:
        print("   ‚ùå –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ï—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏
    if len(df.columns) > 0:
        print(f"   ‚úÖ –ï—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {len(df.columns)}")
        checks_passed += 1
    else:
        print("   ‚ùå –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ï—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
    if len(df) > 0:
        print(f"   ‚úÖ –ï—Å—Ç—å —Å—Ç—Ä–æ–∫–∏: {len(df)}")
        checks_passed += 1
    else:
        print("   ‚ùå –ù–µ—Ç —Å—Ç—Ä–æ–∫")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    empty_columns = df.columns[df.isnull().all()].tolist()
    if not empty_columns:
        print("   ‚úÖ –ù–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
        checks_passed += 1
    else:
        print(f"   ‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {empty_columns}")
    
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {checks_passed}/{total_checks}")
    return checks_passed >= 3

def validate_transformed_data(df: pd.DataFrame) -> bool:
    """
    Validate transformed data
    
    Args:
        df: Transformed DataFrame to validate
        
    Returns:
        bool: True if validation passed
    """
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    checks_passed = 0
    total_checks = 3
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤
    missing_values = df.isnull().sum().sum()
    if missing_values == 0:
        print("   ‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        checks_passed += 1
    else:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {missing_values}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    duplicates = df.duplicated().sum()
    if duplicates == 0:
        print("   ‚úÖ –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        checks_passed += 1
    else:
        print(f"   ‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç—ã: {duplicates}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    if len(df) > 0 and len(df.columns) > 0:
        print("   ‚úÖ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        checks_passed += 1
    else:
        print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {checks_passed}/{total_checks}")
    return checks_passed >= 2

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_df = pd.DataFrame({
        'A': [1, 2, 3],
        'B': [4, 5, 6]
    })
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    validate_raw_data(test_df)
    validate_transformed_data(test_df)
    print("‚úÖ –ú–æ–¥—É–ª—å validate —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
