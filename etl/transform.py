import pandas as pd
import numpy as np

def transform_data(raw_df: pd.DataFrame) -> pd.DataFrame:
    """
    Transform and clean the medical data
    """
    print("üîÑ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    df = raw_df.copy()
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
    
    # 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    print("üìù –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    numeric_candidates = [
        'Patient Age', 'Blood cell count (mcL)', "Mother's age", "Father's age",
        'Test 1', 'Test 2', 'Test 3', 'Test 4', 'Test 5',
        'No. of previous abortion', 'White Blood cell count (thousand per microliter)'
    ]
    
    numeric_columns = []
    for col in numeric_candidates:
        if col in df.columns:
            try:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
                df[col] = pd.to_numeric(df[col], errors='coerce')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ (–Ω–µ –≤—Å–µ NaN)
                if not df[col].isnull().all():
                    numeric_columns.append(col)
                    print(f"   ‚úÖ {col} -> —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø")
                else:
                    print(f"   ‚ùå {col} -> –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
            except Exception as e:
                print(f"   ‚ùå {col} -> –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–ø–æ–ª–Ω—è–µ–º –º–µ–¥–∏–∞–Ω–æ–π
    for col in numeric_columns:
        if df[col].isnull().sum() > 0:
            median_val = df[col].median()
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ inplace
            df.loc[df[col].isnull(), col] = median_val
            print(f"   üîß {col}: –∑–∞–ø–æ–ª–Ω–µ–Ω–æ {df[col].isnull().sum()} –ø—Ä–æ–ø—É—Å–∫–æ–≤ –º–µ–¥–∏–∞–Ω–æ–π {median_val:.1f}")
    
    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ - –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    categorical_columns = [col for col in df.columns if col not in numeric_columns]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
    for col in categorical_columns[:10]:
        if df[col].isnull().sum() > 0:
            try:
                # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É
                if df[col].dtype.name == 'category':
                    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if 'Unknown' not in df[col].cat.categories:
                        df[col] = df[col].cat.add_categories(['Unknown'])
                    df.loc[df[col].isnull(), col] = 'Unknown'
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ç–∏–ø object
                    df[col] = df[col].astype(str)
                    df.loc[df[col].isnull(), col] = 'Unknown'
                    df.loc[df[col] == 'nan', col] = 'Unknown'  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ 'nan'
                print(f"   üîß {col}: –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'Unknown'")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {col}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ - {e}")
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    duplicates = df.duplicated().sum()
    if duplicates > 0:
        df = df.drop_duplicates()
        print(f"   ‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
    else:
        print("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 4. –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–ª–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ
    print("üîç –û—á–∏—Å—Ç–∫–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...")
    columns_to_drop = []
    for col in df.columns:
        # –ö–æ–ª–æ–Ω–∫–∏ –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if df[col].nunique() <= 1:
            columns_to_drop.append(col)
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col} (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)")
        # –ö–æ–ª–æ–Ω–∫–∏ –≥–¥–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (>90%)
        elif df[col].isnull().sum() / len(df) > 0.9:
            columns_to_drop.append(col)
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col} (>90% –ø—Ä–æ–ø—É—Å–∫–æ–≤)")
    
    if columns_to_drop:
        df = df.drop(columns=columns_to_drop)
    
    # 5. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SQLite
    print("üîß –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è SQLite...")
    for col in df.columns:
        if col not in numeric_columns:
            try:
                df[col] = df[col].astype(str)
                # –ó–∞–º–µ–Ω—è–µ–º 'nan' —Å—Ç—Ä–æ–∫–∏ –Ω–∞ 'Unknown'
                df.loc[df[col] == 'nan', col] = 'Unknown'
                print(f"   ‚úÖ {col} -> —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {col}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É - {e}")
    
    # 6. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"   ‚Ä¢ –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {len(numeric_columns)}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {len(df.columns) - len(numeric_columns)}")
    
    if numeric_columns:
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        for col in numeric_columns[:3]:
            if col in df.columns:
                print(f"     {col}: {df[col].min():.1f} - {df[col].max():.1f}")
    
    print("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return df

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    import sys
    sys.path.append('..')
    from extract import load_data
    
    test_df = load_data("/Users/anna/data_loader_project_clean/data/optimized_dataset.parquet")
    transformed_df = transform_data(test_df)
    print("‚úÖ –ú–æ–¥—É–ª—å transform —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
