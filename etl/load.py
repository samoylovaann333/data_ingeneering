import pandas as pd
import os
from sqlalchemy import create_engine, text

def load_data(transformed_df: pd.DataFrame, db_path: str = 'medical_data.db') -> None:
    """
    Load transformed data to SQLite database and save as parquet
    """
    print("üì§ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    if transformed_df.empty:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return
    
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Parquet (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
    os.makedirs('data/processed', exist_ok=True)
    parquet_path = 'data/processed/processed_data.parquet'
    
    try:
        transformed_df.to_parquet(parquet_path, index=False)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Parquet: {parquet_path}")
        
        if os.path.exists(parquet_path):
            file_size = os.path.getsize(parquet_path) / 1024 / 1024
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} MB")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Parquet: {e}")
        raise
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ SQLite (–º–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–æ–∫)
    print(f"üóÑÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        engine = create_engine(f'sqlite:///{db_path}')
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è –ë–î
        sample_df = transformed_df.head(100).copy()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .copy() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        
        table_name = 'medical_data'
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ SQLite
        for col in sample_df.columns:
            if sample_df[col].dtype == 'object':
                # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫–∏
                sample_df[col] = sample_df[col].astype(str)
                # –ó–∞–º–µ–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ NaN –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                sample_df.loc[sample_df[col] == 'nan', col] = 'Unknown'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SQLite
        sample_df.to_sql(
            table_name, 
            engine, 
            if_exists='replace', 
            index=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å text()
        with engine.connect() as conn:
            result = conn.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
            row_count = result.scalar()
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ SQLite:")
        print(f"   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {row_count}")
        print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫: {len(sample_df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫
        if len(sample_df.columns) > 0:
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä –∫–æ–ª–æ–Ω–æ–∫: {list(sample_df.columns[:5])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ë–î: {e}")
        raise
    
    # 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Parquet —Ñ–∞–π–ª
    if os.path.exists(parquet_path):
        try:
            parquet_df = pd.read_parquet(parquet_path)
            if len(parquet_df) == len(transformed_df):
                print("   ‚úÖ Parquet —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
            else:
                print(f"   ‚ö†Ô∏è  Parquet: {len(parquet_df)} —Å—Ç—Ä–æ–∫ (–∏—Å—Ö–æ–¥–Ω–æ: {len(transformed_df)})")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Parquet: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ë–î —Ä–æ–≤–Ω–æ 100 —Å—Ç—Ä–æ–∫ –∏–ª–∏ –º–µ–Ω—å—à–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
    expected_rows = min(100, len(transformed_df))
    if row_count == expected_rows:
        print(f"   ‚úÖ –í –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
    else:
        print(f"   ‚ö†Ô∏è  –í –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_rows})")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    import sys
    sys.path.append('..')
    from extract import load_data
    from transform import transform_data
    
    test_df = load_data("/Users/anna/data_loader_project_clean/data/optimized_dataset.parquet")
    transformed_df = transform_data(test_df)
    load_data(transformed_df)
    print("‚úÖ –ú–æ–¥—É–ª—å load —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
