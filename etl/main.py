import argparse
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(__file__))

from extract import load_data as extract_data
from transform import transform_data
from load import load_data as load_to_db

def run_etl_pipeline(input_path: str, db_path: str = 'medical_data.db'):
    """
    Run complete ETL pipeline: Extract -> Transform -> Load
    
    Args:
        input_path: Path to input data file
        db_path: Path to SQLite database
    """
    print("=" * 60)
    print(" –ó–ê–ü–£–°–ö ETL –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 60)
    
    try:
        # Extract
        print("\n –≠–¢–ê–ü 1: EXTRACT")
        print("-" * 30)
        raw_df = extract_data(input_path)
        
        # Transform
        print("\n –≠–¢–ê–ü 2: TRANSFORM")
        print("-" * 30)
        transformed_df = transform_data(raw_df)
        
        # Load
        print("\n –≠–¢–ê–ü 3: LOAD")
        print("-" * 30)
        load_to_db(transformed_df, db_path)
        
        print("\n" + "=" * 60)
        print(" ETL –ü–ê–ô–ü–õ–ê–ô–ù –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 60)
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚Ä¢ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: data/raw/raw_data.csv")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: data/processed/processed_data.parquet")
        print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        print(f"   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞: medical_data (100 –∑–∞–ø–∏—Å–µ–π)")
        
    except Exception as e:
        print(f"\n –û–®–ò–ë–ö–ê –í –ü–ê–ô–ü–õ–ê–ô–ù–ï: {e}")
        sys.exit(1)

def main():
    """Main CLI interface"""
    parser = argparse.ArgumentParser(
        description='ETL Pipeline for Medical Data Processing',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python -m etl.main --input "data.csv"
  python -m etl.main --input "data.parquet" --db "my_database.db"
  python -m etl.main --input "https://example.com/data.csv"
        '''
    )
    
    parser.add_argument(
        '--input', 
        required=True,
        help='–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º (CSV, Parquet) –∏–ª–∏ URL'
    )
    
    parser.add_argument(
        '--db', 
        default='medical_data.db',
        help='–ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: medical_data.db)'
    )
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ETL –ø–∞–π–ø–ª–∞–π–Ω
    run_etl_pipeline(args.input, args.db)

if __name__ == "__main__":
    main()
